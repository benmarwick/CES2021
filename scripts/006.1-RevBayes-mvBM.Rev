#----------------------------------------------------------------
# This is RevBayes code, not R, and needs to be run in the terminal
# using this tutorial: https://revbayes.github.io/tutorials/cont_traits/multivariate_bm.html


# We begin by reading in the tree
T <- readTrees("output/map_tree.nex")[1]

# Next, we read in the continuous-character data.
data <- readContinuousCharacterData("data/data_for_revbayes.nex")

# We record the number of characters for future reference.
nchar <- data.nchar()

# Additionally, we initialize a variable for our vector of moves 
# BM: I found that doing the same for the monitor didn't work
moves    = VectorMoves()

# We create a constant node for the tree that corresponds to the observed phylogeny.
tree <- T
ntips     <- T.ntips()
nbranches <- 2 * ntips - 2

# Average rate of evolution
# We draw the average rate of evolution, σ2, from a vague lognormal prior. This prior is uniform on the log scale, which means that it is represents ignorance about the order of magnitude of the average rate of evolution. We use a scaling move to propose updates to this parameter.

sigma2 ~ dnLoguniform(1e-3, 1)
moves.append( mvScale(sigma2, weight=1.0) )

# specify the prior on the number of rate shifts
expected_number_of_shifts <- 5
rate_shift_probability    <- expected_number_of_shifts / nbranches

# Relaxing the morphological clock 
# specify the prior on the magnitude of rate shifts
sd = 0.578
rate_shift_distribution = dnLognormal(-sd^2/2, sd)

# specify the branch-specific rates
for(i in nbranches:1) {

    # draw the rate multiplier from a mixture distribution
    branch_rate_multiplier[i] ~ dnReversibleJumpMixture(1, rate_shift_distribution, Probability(1 - rate_shift_probability) )

    # compute the rate for the branch
    if ( tree.isRoot( tree.parent(i) ) ) {
       branch_rates[i] := sigma2 * branch_rate_multiplier[i]
    } else {
       branch_rates[i] := branch_rates[tree.parent(i)] * branch_rate_multiplier[i]
    }

    # keep track of whether the branch has a rate shift
    branch_rate_shift[i] := ifelse( branch_rate_multiplier[i] == 1, 0, 1 )

    # use reversible-jump to move between models with and without
    # shifts on the branch
    moves.append( mvRJSwitch(branch_rate_multiplier[i], weight=1) )

    # include proposals on the rate mutliplier (when it is not 1)
    moves.append( mvScale(branch_rate_multiplier[i], weight=1) )

}

# keep track of the number of rate shifts
num_rate_changes := sum( branch_rate_shift )

# Relative rates of evolution among characters
# We draw proportional rates of evolution among characters from a symmetric Dirichlet distribution with concentration parameter α. We then multiply these proportional rates by the number of characters to get the relative rates. This ensures that the relative rates have a mean of 1. Increasing the value of α will decrease the amount of rate variation under the prior.

alpha <- 1.0
proportional_rates ~ dnDirichlet( rep(alpha, nchar) )
relative_rates := proportional_rates * nchar

# We apply an mvBetaSimplex move to the proportional rates.
moves.append( mvBetaSimplex(proportional_rates, weight=2.0) )

# Correlation matrix
# We draw the correlation matrix from an LKJ prior distribution with concentration parameter 
# Larger values of eta correspond to less prior correlation among characters. This distribution draws a correlation matrix with nchar rows and columns.

eta <- 1.0
R ~ dnLKJ( eta, nchar )

# We use special moves to update the correlation matrix. The first move, mvCorrelationMatrixRandomWalk, perturbs each element of the matrix by a small amount simultaneously. The second move, mvCorrelationMatrixSingleElementBeta, updates a randomly chosen element of the correlation matrix by drawing Beta random variable centered on the current correlation (stretched from -1 to 1).

moves.append( mvCorrelationMatrixRandomWalk(R, weight=3.0) )
moves.append( mvCorrelationMatrixSingleElementBeta(R, weight=5.0) )

# We extract the elements in the upper triangle of the correlation matrix for reference. These parameters are the vector of pairwise correlation parameters, ρ in the upper triangular part of the matrix, in natural reading order (left to right, top to bottom).

correlations := R.upperTriangle()

# Variance-covariance matrix
# Having specified the separate components, we assemble the variance-covariance matrix. Here, we provide the square-roots of the relative rates (i.e., the standard deviations) and the correlation matrix. We exclude the average rate, sigma2, because we may want to allow different branches of the phylogeny to have different rates.

V := fnDecompVarCovar( relative_rates^0.5, R )

##########################
# Specify the BM process #
##########################

# Multivariate Brownian motion
# Finally, we draw the continuous character data from a phylogenetic mvBM model. We provide the variance-covariance matrix, V.

X ~ dnPhyloMultivariateBrownianREML(tree, branchRates=branch_rates^0.5, rateMatrix=V)

# We clamp the observed data to this stochastic node to represent that they are observed.
X.clamp(data)

#############
# The Model #
#############

# Finally, we create a workspace object for the entire model with model(). Remember that workspace objects are initialized with the = operator, and are not themselves part of the Bayesian graphical model. The model() function traverses the entire model graph and finds all the nodes in the model that we specified. This object provides a convenient way to refer to the whole model object, rather than just a single DAG node.

mymodel = model(sigma2)

### create a monitor to log the samples to file
monitors[1] = mnModel(filename="output/BM_mv_posterior_pp.log",printgen=10, separator = TAB)

### compute power posterior distributions
pow_p = powerPosterior(mymodel, moves, monitors, "output/BM_mv_powp.out", cats=50, sampleFreq=10) 
pow_p.burnin(generations=5000,tuningInterval=200)
pow_p.run(generations=1000)  

### use stepping-stone sampling to calculate marginal likelihoods
ss = steppingStoneSampler(file="output/BM_mv_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal() 

### use path sampling to calculate marginal likelihoods
ps = pathSampler(file="output/BM_mv_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal() 


q() # quits RevBayes